package KK

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Attribute) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "hinnyo":
			z.Hinnyo, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Hinnyo")
				return
			}
		case "harapeko":
			z.Harapeko, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Harapeko")
				return
			}
		case "donkan":
			z.Donkan, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Donkan")
				return
			}
		case "choroi":
			z.Choroi, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Choroi")
				return
			}
		case "bitch":
			z.Bitch, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Bitch")
				return
			}
		case "mutturi":
			z.Mutturi, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Mutturi")
				return
			}
		case "dokusyo":
			z.Dokusyo, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Dokusyo")
				return
			}
		case "ongaku":
			z.Ongaku, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Ongaku")
				return
			}
		case "kappatu":
			z.Kappatu, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Kappatu")
				return
			}
		case "ukemi":
			z.Ukemi, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Ukemi")
				return
			}
		case "friendly":
			z.Friendly, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Friendly")
				return
			}
		case "kireizuki":
			z.Kireizuki, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Kireizuki")
				return
			}
		case "taida":
			z.Taida, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Taida")
				return
			}
		case "sinsyutu":
			z.Sinsyutu, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Sinsyutu")
				return
			}
		case "hitori":
			z.Hitori, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Hitori")
				return
			}
		case "undo":
			z.Undo, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Undo")
				return
			}
		case "majime":
			z.Majime, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Majime")
				return
			}
		case "likeGirls":
			z.LikeGirls, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "LikeGirls")
				return
			}
		case "ExtendedSaveData":
			z.ExtendedSaveData, err = dc.ReadIntf()
			if err != nil {
				err = msgp.WrapError(err, "ExtendedSaveData")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Attribute) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 19
	// write "hinnyo"
	err = en.Append(0xde, 0x0, 0x13, 0xa6, 0x68, 0x69, 0x6e, 0x6e, 0x79, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Hinnyo)
	if err != nil {
		err = msgp.WrapError(err, "Hinnyo")
		return
	}
	// write "harapeko"
	err = en.Append(0xa8, 0x68, 0x61, 0x72, 0x61, 0x70, 0x65, 0x6b, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Harapeko)
	if err != nil {
		err = msgp.WrapError(err, "Harapeko")
		return
	}
	// write "donkan"
	err = en.Append(0xa6, 0x64, 0x6f, 0x6e, 0x6b, 0x61, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Donkan)
	if err != nil {
		err = msgp.WrapError(err, "Donkan")
		return
	}
	// write "choroi"
	err = en.Append(0xa6, 0x63, 0x68, 0x6f, 0x72, 0x6f, 0x69)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Choroi)
	if err != nil {
		err = msgp.WrapError(err, "Choroi")
		return
	}
	// write "bitch"
	err = en.Append(0xa5, 0x62, 0x69, 0x74, 0x63, 0x68)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Bitch)
	if err != nil {
		err = msgp.WrapError(err, "Bitch")
		return
	}
	// write "mutturi"
	err = en.Append(0xa7, 0x6d, 0x75, 0x74, 0x74, 0x75, 0x72, 0x69)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Mutturi)
	if err != nil {
		err = msgp.WrapError(err, "Mutturi")
		return
	}
	// write "dokusyo"
	err = en.Append(0xa7, 0x64, 0x6f, 0x6b, 0x75, 0x73, 0x79, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Dokusyo)
	if err != nil {
		err = msgp.WrapError(err, "Dokusyo")
		return
	}
	// write "ongaku"
	err = en.Append(0xa6, 0x6f, 0x6e, 0x67, 0x61, 0x6b, 0x75)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Ongaku)
	if err != nil {
		err = msgp.WrapError(err, "Ongaku")
		return
	}
	// write "kappatu"
	err = en.Append(0xa7, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x74, 0x75)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Kappatu)
	if err != nil {
		err = msgp.WrapError(err, "Kappatu")
		return
	}
	// write "ukemi"
	err = en.Append(0xa5, 0x75, 0x6b, 0x65, 0x6d, 0x69)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Ukemi)
	if err != nil {
		err = msgp.WrapError(err, "Ukemi")
		return
	}
	// write "friendly"
	err = en.Append(0xa8, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Friendly)
	if err != nil {
		err = msgp.WrapError(err, "Friendly")
		return
	}
	// write "kireizuki"
	err = en.Append(0xa9, 0x6b, 0x69, 0x72, 0x65, 0x69, 0x7a, 0x75, 0x6b, 0x69)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Kireizuki)
	if err != nil {
		err = msgp.WrapError(err, "Kireizuki")
		return
	}
	// write "taida"
	err = en.Append(0xa5, 0x74, 0x61, 0x69, 0x64, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Taida)
	if err != nil {
		err = msgp.WrapError(err, "Taida")
		return
	}
	// write "sinsyutu"
	err = en.Append(0xa8, 0x73, 0x69, 0x6e, 0x73, 0x79, 0x75, 0x74, 0x75)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Sinsyutu)
	if err != nil {
		err = msgp.WrapError(err, "Sinsyutu")
		return
	}
	// write "hitori"
	err = en.Append(0xa6, 0x68, 0x69, 0x74, 0x6f, 0x72, 0x69)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Hitori)
	if err != nil {
		err = msgp.WrapError(err, "Hitori")
		return
	}
	// write "undo"
	err = en.Append(0xa4, 0x75, 0x6e, 0x64, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Undo)
	if err != nil {
		err = msgp.WrapError(err, "Undo")
		return
	}
	// write "majime"
	err = en.Append(0xa6, 0x6d, 0x61, 0x6a, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Majime)
	if err != nil {
		err = msgp.WrapError(err, "Majime")
		return
	}
	// write "likeGirls"
	err = en.Append(0xa9, 0x6c, 0x69, 0x6b, 0x65, 0x47, 0x69, 0x72, 0x6c, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.LikeGirls)
	if err != nil {
		err = msgp.WrapError(err, "LikeGirls")
		return
	}
	// write "ExtendedSaveData"
	err = en.Append(0xb0, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteIntf(z.ExtendedSaveData)
	if err != nil {
		err = msgp.WrapError(err, "ExtendedSaveData")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Attribute) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 19
	// string "hinnyo"
	o = append(o, 0xde, 0x0, 0x13, 0xa6, 0x68, 0x69, 0x6e, 0x6e, 0x79, 0x6f)
	o = msgp.AppendBool(o, z.Hinnyo)
	// string "harapeko"
	o = append(o, 0xa8, 0x68, 0x61, 0x72, 0x61, 0x70, 0x65, 0x6b, 0x6f)
	o = msgp.AppendBool(o, z.Harapeko)
	// string "donkan"
	o = append(o, 0xa6, 0x64, 0x6f, 0x6e, 0x6b, 0x61, 0x6e)
	o = msgp.AppendBool(o, z.Donkan)
	// string "choroi"
	o = append(o, 0xa6, 0x63, 0x68, 0x6f, 0x72, 0x6f, 0x69)
	o = msgp.AppendBool(o, z.Choroi)
	// string "bitch"
	o = append(o, 0xa5, 0x62, 0x69, 0x74, 0x63, 0x68)
	o = msgp.AppendBool(o, z.Bitch)
	// string "mutturi"
	o = append(o, 0xa7, 0x6d, 0x75, 0x74, 0x74, 0x75, 0x72, 0x69)
	o = msgp.AppendBool(o, z.Mutturi)
	// string "dokusyo"
	o = append(o, 0xa7, 0x64, 0x6f, 0x6b, 0x75, 0x73, 0x79, 0x6f)
	o = msgp.AppendBool(o, z.Dokusyo)
	// string "ongaku"
	o = append(o, 0xa6, 0x6f, 0x6e, 0x67, 0x61, 0x6b, 0x75)
	o = msgp.AppendBool(o, z.Ongaku)
	// string "kappatu"
	o = append(o, 0xa7, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x74, 0x75)
	o = msgp.AppendBool(o, z.Kappatu)
	// string "ukemi"
	o = append(o, 0xa5, 0x75, 0x6b, 0x65, 0x6d, 0x69)
	o = msgp.AppendBool(o, z.Ukemi)
	// string "friendly"
	o = append(o, 0xa8, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79)
	o = msgp.AppendBool(o, z.Friendly)
	// string "kireizuki"
	o = append(o, 0xa9, 0x6b, 0x69, 0x72, 0x65, 0x69, 0x7a, 0x75, 0x6b, 0x69)
	o = msgp.AppendBool(o, z.Kireizuki)
	// string "taida"
	o = append(o, 0xa5, 0x74, 0x61, 0x69, 0x64, 0x61)
	o = msgp.AppendBool(o, z.Taida)
	// string "sinsyutu"
	o = append(o, 0xa8, 0x73, 0x69, 0x6e, 0x73, 0x79, 0x75, 0x74, 0x75)
	o = msgp.AppendBool(o, z.Sinsyutu)
	// string "hitori"
	o = append(o, 0xa6, 0x68, 0x69, 0x74, 0x6f, 0x72, 0x69)
	o = msgp.AppendBool(o, z.Hitori)
	// string "undo"
	o = append(o, 0xa4, 0x75, 0x6e, 0x64, 0x6f)
	o = msgp.AppendBool(o, z.Undo)
	// string "majime"
	o = append(o, 0xa6, 0x6d, 0x61, 0x6a, 0x69, 0x6d, 0x65)
	o = msgp.AppendBool(o, z.Majime)
	// string "likeGirls"
	o = append(o, 0xa9, 0x6c, 0x69, 0x6b, 0x65, 0x47, 0x69, 0x72, 0x6c, 0x73)
	o = msgp.AppendBool(o, z.LikeGirls)
	// string "ExtendedSaveData"
	o = append(o, 0xb0, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61)
	o, err = msgp.AppendIntf(o, z.ExtendedSaveData)
	if err != nil {
		err = msgp.WrapError(err, "ExtendedSaveData")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Attribute) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "hinnyo":
			z.Hinnyo, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Hinnyo")
				return
			}
		case "harapeko":
			z.Harapeko, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Harapeko")
				return
			}
		case "donkan":
			z.Donkan, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Donkan")
				return
			}
		case "choroi":
			z.Choroi, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Choroi")
				return
			}
		case "bitch":
			z.Bitch, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bitch")
				return
			}
		case "mutturi":
			z.Mutturi, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mutturi")
				return
			}
		case "dokusyo":
			z.Dokusyo, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Dokusyo")
				return
			}
		case "ongaku":
			z.Ongaku, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ongaku")
				return
			}
		case "kappatu":
			z.Kappatu, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Kappatu")
				return
			}
		case "ukemi":
			z.Ukemi, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ukemi")
				return
			}
		case "friendly":
			z.Friendly, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Friendly")
				return
			}
		case "kireizuki":
			z.Kireizuki, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Kireizuki")
				return
			}
		case "taida":
			z.Taida, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Taida")
				return
			}
		case "sinsyutu":
			z.Sinsyutu, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sinsyutu")
				return
			}
		case "hitori":
			z.Hitori, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Hitori")
				return
			}
		case "undo":
			z.Undo, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Undo")
				return
			}
		case "majime":
			z.Majime, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Majime")
				return
			}
		case "likeGirls":
			z.LikeGirls, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LikeGirls")
				return
			}
		case "ExtendedSaveData":
			z.ExtendedSaveData, bts, err = msgp.ReadIntfBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExtendedSaveData")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Attribute) Msgsize() (s int) {
	s = 3 + 7 + msgp.BoolSize + 9 + msgp.BoolSize + 7 + msgp.BoolSize + 7 + msgp.BoolSize + 6 + msgp.BoolSize + 8 + msgp.BoolSize + 8 + msgp.BoolSize + 7 + msgp.BoolSize + 8 + msgp.BoolSize + 6 + msgp.BoolSize + 9 + msgp.BoolSize + 10 + msgp.BoolSize + 6 + msgp.BoolSize + 9 + msgp.BoolSize + 7 + msgp.BoolSize + 5 + msgp.BoolSize + 7 + msgp.BoolSize + 10 + msgp.BoolSize + 17 + msgp.GuessSize(z.ExtendedSaveData)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Awnser) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "animal":
			z.Animal, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Animal")
				return
			}
		case "eat":
			z.Eat, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Eat")
				return
			}
		case "cook":
			z.Cook, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Cook")
				return
			}
		case "exercise":
			z.Exercise, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Exercise")
				return
			}
		case "study":
			z.Study, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Study")
				return
			}
		case "fashionable":
			z.Fashionable, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Fashionable")
				return
			}
		case "blackCoffee":
			z.BlackCoffee, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "BlackCoffee")
				return
			}
		case "spicy":
			z.Spicy, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Spicy")
				return
			}
		case "sweet":
			z.Sweet, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Sweet")
				return
			}
		case "ExtendedSaveData":
			z.ExtendedSaveData, err = dc.ReadIntf()
			if err != nil {
				err = msgp.WrapError(err, "ExtendedSaveData")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Awnser) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 10
	// write "animal"
	err = en.Append(0x8a, 0xa6, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Animal)
	if err != nil {
		err = msgp.WrapError(err, "Animal")
		return
	}
	// write "eat"
	err = en.Append(0xa3, 0x65, 0x61, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Eat)
	if err != nil {
		err = msgp.WrapError(err, "Eat")
		return
	}
	// write "cook"
	err = en.Append(0xa4, 0x63, 0x6f, 0x6f, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Cook)
	if err != nil {
		err = msgp.WrapError(err, "Cook")
		return
	}
	// write "exercise"
	err = en.Append(0xa8, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Exercise)
	if err != nil {
		err = msgp.WrapError(err, "Exercise")
		return
	}
	// write "study"
	err = en.Append(0xa5, 0x73, 0x74, 0x75, 0x64, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Study)
	if err != nil {
		err = msgp.WrapError(err, "Study")
		return
	}
	// write "fashionable"
	err = en.Append(0xab, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Fashionable)
	if err != nil {
		err = msgp.WrapError(err, "Fashionable")
		return
	}
	// write "blackCoffee"
	err = en.Append(0xab, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.BlackCoffee)
	if err != nil {
		err = msgp.WrapError(err, "BlackCoffee")
		return
	}
	// write "spicy"
	err = en.Append(0xa5, 0x73, 0x70, 0x69, 0x63, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Spicy)
	if err != nil {
		err = msgp.WrapError(err, "Spicy")
		return
	}
	// write "sweet"
	err = en.Append(0xa5, 0x73, 0x77, 0x65, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Sweet)
	if err != nil {
		err = msgp.WrapError(err, "Sweet")
		return
	}
	// write "ExtendedSaveData"
	err = en.Append(0xb0, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteIntf(z.ExtendedSaveData)
	if err != nil {
		err = msgp.WrapError(err, "ExtendedSaveData")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Awnser) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 10
	// string "animal"
	o = append(o, 0x8a, 0xa6, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c)
	o = msgp.AppendBool(o, z.Animal)
	// string "eat"
	o = append(o, 0xa3, 0x65, 0x61, 0x74)
	o = msgp.AppendBool(o, z.Eat)
	// string "cook"
	o = append(o, 0xa4, 0x63, 0x6f, 0x6f, 0x6b)
	o = msgp.AppendBool(o, z.Cook)
	// string "exercise"
	o = append(o, 0xa8, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65)
	o = msgp.AppendBool(o, z.Exercise)
	// string "study"
	o = append(o, 0xa5, 0x73, 0x74, 0x75, 0x64, 0x79)
	o = msgp.AppendBool(o, z.Study)
	// string "fashionable"
	o = append(o, 0xab, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65)
	o = msgp.AppendBool(o, z.Fashionable)
	// string "blackCoffee"
	o = append(o, 0xab, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65)
	o = msgp.AppendBool(o, z.BlackCoffee)
	// string "spicy"
	o = append(o, 0xa5, 0x73, 0x70, 0x69, 0x63, 0x79)
	o = msgp.AppendBool(o, z.Spicy)
	// string "sweet"
	o = append(o, 0xa5, 0x73, 0x77, 0x65, 0x65, 0x74)
	o = msgp.AppendBool(o, z.Sweet)
	// string "ExtendedSaveData"
	o = append(o, 0xb0, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61)
	o, err = msgp.AppendIntf(o, z.ExtendedSaveData)
	if err != nil {
		err = msgp.WrapError(err, "ExtendedSaveData")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Awnser) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "animal":
			z.Animal, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Animal")
				return
			}
		case "eat":
			z.Eat, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Eat")
				return
			}
		case "cook":
			z.Cook, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cook")
				return
			}
		case "exercise":
			z.Exercise, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Exercise")
				return
			}
		case "study":
			z.Study, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Study")
				return
			}
		case "fashionable":
			z.Fashionable, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Fashionable")
				return
			}
		case "blackCoffee":
			z.BlackCoffee, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlackCoffee")
				return
			}
		case "spicy":
			z.Spicy, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Spicy")
				return
			}
		case "sweet":
			z.Sweet, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sweet")
				return
			}
		case "ExtendedSaveData":
			z.ExtendedSaveData, bts, err = msgp.ReadIntfBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExtendedSaveData")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Awnser) Msgsize() (s int) {
	s = 1 + 7 + msgp.BoolSize + 4 + msgp.BoolSize + 5 + msgp.BoolSize + 9 + msgp.BoolSize + 6 + msgp.BoolSize + 12 + msgp.BoolSize + 12 + msgp.BoolSize + 6 + msgp.BoolSize + 6 + msgp.BoolSize + 17 + msgp.GuessSize(z.ExtendedSaveData)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Denial) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "kiss":
			z.Kiss, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Kiss")
				return
			}
		case "aibu":
			z.Aibu, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Aibu")
				return
			}
		case "anal":
			z.Anal, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Anal")
				return
			}
		case "massage":
			z.Massage, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Massage")
				return
			}
		case "notCondom":
			z.NotCondom, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "NotCondom")
				return
			}
		case "ExtendedSaveData":
			z.ExtendedSaveData, err = dc.ReadIntf()
			if err != nil {
				err = msgp.WrapError(err, "ExtendedSaveData")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Denial) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "kiss"
	err = en.Append(0x86, 0xa4, 0x6b, 0x69, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Kiss)
	if err != nil {
		err = msgp.WrapError(err, "Kiss")
		return
	}
	// write "aibu"
	err = en.Append(0xa4, 0x61, 0x69, 0x62, 0x75)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Aibu)
	if err != nil {
		err = msgp.WrapError(err, "Aibu")
		return
	}
	// write "anal"
	err = en.Append(0xa4, 0x61, 0x6e, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Anal)
	if err != nil {
		err = msgp.WrapError(err, "Anal")
		return
	}
	// write "massage"
	err = en.Append(0xa7, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Massage)
	if err != nil {
		err = msgp.WrapError(err, "Massage")
		return
	}
	// write "notCondom"
	err = en.Append(0xa9, 0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x6f, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteBool(z.NotCondom)
	if err != nil {
		err = msgp.WrapError(err, "NotCondom")
		return
	}
	// write "ExtendedSaveData"
	err = en.Append(0xb0, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteIntf(z.ExtendedSaveData)
	if err != nil {
		err = msgp.WrapError(err, "ExtendedSaveData")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Denial) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "kiss"
	o = append(o, 0x86, 0xa4, 0x6b, 0x69, 0x73, 0x73)
	o = msgp.AppendBool(o, z.Kiss)
	// string "aibu"
	o = append(o, 0xa4, 0x61, 0x69, 0x62, 0x75)
	o = msgp.AppendBool(o, z.Aibu)
	// string "anal"
	o = append(o, 0xa4, 0x61, 0x6e, 0x61, 0x6c)
	o = msgp.AppendBool(o, z.Anal)
	// string "massage"
	o = append(o, 0xa7, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendBool(o, z.Massage)
	// string "notCondom"
	o = append(o, 0xa9, 0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x6f, 0x6d)
	o = msgp.AppendBool(o, z.NotCondom)
	// string "ExtendedSaveData"
	o = append(o, 0xb0, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61)
	o, err = msgp.AppendIntf(o, z.ExtendedSaveData)
	if err != nil {
		err = msgp.WrapError(err, "ExtendedSaveData")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Denial) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "kiss":
			z.Kiss, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Kiss")
				return
			}
		case "aibu":
			z.Aibu, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Aibu")
				return
			}
		case "anal":
			z.Anal, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Anal")
				return
			}
		case "massage":
			z.Massage, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Massage")
				return
			}
		case "notCondom":
			z.NotCondom, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NotCondom")
				return
			}
		case "ExtendedSaveData":
			z.ExtendedSaveData, bts, err = msgp.ReadIntfBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExtendedSaveData")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Denial) Msgsize() (s int) {
	s = 1 + 5 + msgp.BoolSize + 5 + msgp.BoolSize + 5 + msgp.BoolSize + 8 + msgp.BoolSize + 10 + msgp.BoolSize + 17 + msgp.GuessSize(z.ExtendedSaveData)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *KKChaFileParameter) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "version":
			z.Version, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "sex":
			z.Sex, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Sex")
				return
			}
		case "exType":
			z.ExType, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ExType")
				return
			}
		case "lastname":
			z.Lastname, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Lastname")
				return
			}
		case "firstname":
			z.Firstname, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Firstname")
				return
			}
		case "nickname":
			z.Nickname, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Nickname")
				return
			}
		case "callType":
			z.CallType, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "CallType")
				return
			}
		case "personality":
			z.Personality, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Personality")
				return
			}
		case "bloodType":
			z.BloodType, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "BloodType")
				return
			}
		case "birthMonth":
			z.BirthMonth, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "BirthMonth")
				return
			}
		case "birthDay":
			z.BirthDay, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "BirthDay")
				return
			}
		case "clubActivities":
			z.ClubActivities, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ClubActivities")
				return
			}
		case "voiceRate":
			z.VoiceRate, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "VoiceRate")
				return
			}
		case "weakPoint":
			z.WeakPoint, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "WeakPoint")
				return
			}
		case "awnser":
			err = z.Awnser.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Awnser")
				return
			}
		case "denial":
			err = z.Denial.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Denial")
				return
			}
		case "attribute":
			err = z.Attribute.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Attribute")
				return
			}
		case "aggressive":
			z.Aggressive, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Aggressive")
				return
			}
		case "diligence":
			z.Diligence, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Diligence")
				return
			}
		case "kindness":
			z.Kindness, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Kindness")
				return
			}
		case "ExtendedSaveData":
			z.ExtendedSaveData, err = dc.ReadIntf()
			if err != nil {
				err = msgp.WrapError(err, "ExtendedSaveData")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *KKChaFileParameter) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 21
	// write "version"
	err = en.Append(0xde, 0x0, 0x15, 0xa7, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// write "sex"
	err = en.Append(0xa3, 0x73, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Sex)
	if err != nil {
		err = msgp.WrapError(err, "Sex")
		return
	}
	// write "exType"
	err = en.Append(0xa6, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ExType)
	if err != nil {
		err = msgp.WrapError(err, "ExType")
		return
	}
	// write "lastname"
	err = en.Append(0xa8, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Lastname)
	if err != nil {
		err = msgp.WrapError(err, "Lastname")
		return
	}
	// write "firstname"
	err = en.Append(0xa9, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Firstname)
	if err != nil {
		err = msgp.WrapError(err, "Firstname")
		return
	}
	// write "nickname"
	err = en.Append(0xa8, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Nickname)
	if err != nil {
		err = msgp.WrapError(err, "Nickname")
		return
	}
	// write "callType"
	err = en.Append(0xa8, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.CallType)
	if err != nil {
		err = msgp.WrapError(err, "CallType")
		return
	}
	// write "personality"
	err = en.Append(0xab, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Personality)
	if err != nil {
		err = msgp.WrapError(err, "Personality")
		return
	}
	// write "bloodType"
	err = en.Append(0xa9, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.BloodType)
	if err != nil {
		err = msgp.WrapError(err, "BloodType")
		return
	}
	// write "birthMonth"
	err = en.Append(0xaa, 0x62, 0x69, 0x72, 0x74, 0x68, 0x4d, 0x6f, 0x6e, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteInt(z.BirthMonth)
	if err != nil {
		err = msgp.WrapError(err, "BirthMonth")
		return
	}
	// write "birthDay"
	err = en.Append(0xa8, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x79)
	if err != nil {
		return
	}
	err = en.WriteInt(z.BirthDay)
	if err != nil {
		err = msgp.WrapError(err, "BirthDay")
		return
	}
	// write "clubActivities"
	err = en.Append(0xae, 0x63, 0x6c, 0x75, 0x62, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ClubActivities)
	if err != nil {
		err = msgp.WrapError(err, "ClubActivities")
		return
	}
	// write "voiceRate"
	err = en.Append(0xa9, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.VoiceRate)
	if err != nil {
		err = msgp.WrapError(err, "VoiceRate")
		return
	}
	// write "weakPoint"
	err = en.Append(0xa9, 0x77, 0x65, 0x61, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.WeakPoint)
	if err != nil {
		err = msgp.WrapError(err, "WeakPoint")
		return
	}
	// write "awnser"
	err = en.Append(0xa6, 0x61, 0x77, 0x6e, 0x73, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.Awnser.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Awnser")
		return
	}
	// write "denial"
	err = en.Append(0xa6, 0x64, 0x65, 0x6e, 0x69, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = z.Denial.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Denial")
		return
	}
	// write "attribute"
	err = en.Append(0xa9, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65)
	if err != nil {
		return
	}
	err = z.Attribute.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Attribute")
		return
	}
	// write "aggressive"
	err = en.Append(0xaa, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Aggressive)
	if err != nil {
		err = msgp.WrapError(err, "Aggressive")
		return
	}
	// write "diligence"
	err = en.Append(0xa9, 0x64, 0x69, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Diligence)
	if err != nil {
		err = msgp.WrapError(err, "Diligence")
		return
	}
	// write "kindness"
	err = en.Append(0xa8, 0x6b, 0x69, 0x6e, 0x64, 0x6e, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Kindness)
	if err != nil {
		err = msgp.WrapError(err, "Kindness")
		return
	}
	// write "ExtendedSaveData"
	err = en.Append(0xb0, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteIntf(z.ExtendedSaveData)
	if err != nil {
		err = msgp.WrapError(err, "ExtendedSaveData")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *KKChaFileParameter) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 21
	// string "version"
	o = append(o, 0xde, 0x0, 0x15, 0xa7, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Version)
	// string "sex"
	o = append(o, 0xa3, 0x73, 0x65, 0x78)
	o = msgp.AppendInt(o, z.Sex)
	// string "exType"
	o = append(o, 0xa6, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendInt(o, z.ExType)
	// string "lastname"
	o = append(o, 0xa8, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Lastname)
	// string "firstname"
	o = append(o, 0xa9, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Firstname)
	// string "nickname"
	o = append(o, 0xa8, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Nickname)
	// string "callType"
	o = append(o, 0xa8, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendInt(o, z.CallType)
	// string "personality"
	o = append(o, 0xab, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79)
	o = msgp.AppendInt(o, z.Personality)
	// string "bloodType"
	o = append(o, 0xa9, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendInt(o, z.BloodType)
	// string "birthMonth"
	o = append(o, 0xaa, 0x62, 0x69, 0x72, 0x74, 0x68, 0x4d, 0x6f, 0x6e, 0x74, 0x68)
	o = msgp.AppendInt(o, z.BirthMonth)
	// string "birthDay"
	o = append(o, 0xa8, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x79)
	o = msgp.AppendInt(o, z.BirthDay)
	// string "clubActivities"
	o = append(o, 0xae, 0x63, 0x6c, 0x75, 0x62, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73)
	o = msgp.AppendInt(o, z.ClubActivities)
	// string "voiceRate"
	o = append(o, 0xa9, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65)
	o = msgp.AppendFloat64(o, z.VoiceRate)
	// string "weakPoint"
	o = append(o, 0xa9, 0x77, 0x65, 0x61, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.WeakPoint)
	// string "awnser"
	o = append(o, 0xa6, 0x61, 0x77, 0x6e, 0x73, 0x65, 0x72)
	o, err = z.Awnser.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Awnser")
		return
	}
	// string "denial"
	o = append(o, 0xa6, 0x64, 0x65, 0x6e, 0x69, 0x61, 0x6c)
	o, err = z.Denial.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Denial")
		return
	}
	// string "attribute"
	o = append(o, 0xa9, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65)
	o, err = z.Attribute.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Attribute")
		return
	}
	// string "aggressive"
	o = append(o, 0xaa, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65)
	o = msgp.AppendInt(o, z.Aggressive)
	// string "diligence"
	o = append(o, 0xa9, 0x64, 0x69, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65)
	o = msgp.AppendInt(o, z.Diligence)
	// string "kindness"
	o = append(o, 0xa8, 0x6b, 0x69, 0x6e, 0x64, 0x6e, 0x65, 0x73, 0x73)
	o = msgp.AppendInt(o, z.Kindness)
	// string "ExtendedSaveData"
	o = append(o, 0xb0, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61)
	o, err = msgp.AppendIntf(o, z.ExtendedSaveData)
	if err != nil {
		err = msgp.WrapError(err, "ExtendedSaveData")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *KKChaFileParameter) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "version":
			z.Version, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "sex":
			z.Sex, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sex")
				return
			}
		case "exType":
			z.ExType, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExType")
				return
			}
		case "lastname":
			z.Lastname, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Lastname")
				return
			}
		case "firstname":
			z.Firstname, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Firstname")
				return
			}
		case "nickname":
			z.Nickname, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nickname")
				return
			}
		case "callType":
			z.CallType, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CallType")
				return
			}
		case "personality":
			z.Personality, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Personality")
				return
			}
		case "bloodType":
			z.BloodType, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BloodType")
				return
			}
		case "birthMonth":
			z.BirthMonth, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BirthMonth")
				return
			}
		case "birthDay":
			z.BirthDay, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BirthDay")
				return
			}
		case "clubActivities":
			z.ClubActivities, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClubActivities")
				return
			}
		case "voiceRate":
			z.VoiceRate, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VoiceRate")
				return
			}
		case "weakPoint":
			z.WeakPoint, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WeakPoint")
				return
			}
		case "awnser":
			bts, err = z.Awnser.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Awnser")
				return
			}
		case "denial":
			bts, err = z.Denial.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Denial")
				return
			}
		case "attribute":
			bts, err = z.Attribute.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Attribute")
				return
			}
		case "aggressive":
			z.Aggressive, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Aggressive")
				return
			}
		case "diligence":
			z.Diligence, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Diligence")
				return
			}
		case "kindness":
			z.Kindness, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Kindness")
				return
			}
		case "ExtendedSaveData":
			z.ExtendedSaveData, bts, err = msgp.ReadIntfBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExtendedSaveData")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *KKChaFileParameter) Msgsize() (s int) {
	s = 3 + 8 + msgp.StringPrefixSize + len(z.Version) + 4 + msgp.IntSize + 7 + msgp.IntSize + 9 + msgp.StringPrefixSize + len(z.Lastname) + 10 + msgp.StringPrefixSize + len(z.Firstname) + 9 + msgp.StringPrefixSize + len(z.Nickname) + 9 + msgp.IntSize + 12 + msgp.IntSize + 10 + msgp.IntSize + 11 + msgp.IntSize + 9 + msgp.IntSize + 15 + msgp.IntSize + 10 + msgp.Float64Size + 10 + msgp.IntSize + 7 + z.Awnser.Msgsize() + 7 + z.Denial.Msgsize() + 10 + z.Attribute.Msgsize() + 11 + msgp.IntSize + 10 + msgp.IntSize + 9 + msgp.IntSize + 17 + msgp.GuessSize(z.ExtendedSaveData)
	return
}
